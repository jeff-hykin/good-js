toRepresentation(objects) is: new Map([
    [structuredClone, "structuredClone"],
    [Function.prototype, "Object.getPrototypeOf(structuredClone)"],
    [structuredClone.prototype, "structuredClone.prototype"],
    [Function, "structuredClone.constructor"],
    [parseFloat, "parseFloat"],
    [undefined, "parseFloat.prototype"],
    [Infinity, "Infinity"],
    [Number.prototype, "Object.getPrototypeOf(Infinity)"],
    [Number, "Infinity.constructor"],
    [NaN, "NaN"],
    [ArrayBuffer, "ArrayBuffer"],
    [ArrayBuffer.prototype, "ArrayBuffer.prototype"],
    [Uint8Array, "Uint8Array"],
    [TypedArray /*native function*/, "Object.getPrototypeOf(Uint8Array)"],
    [Uint8Array.prototype, "Uint8Array.prototype"],
    [Int8Array, "Int8Array"],
    [Int8Array.prototype, "Int8Array.prototype"],
    [Uint16Array, "Uint16Array"],
    [Uint16Array.prototype, "Uint16Array.prototype"],
    [Int16Array, "Int16Array"],
    [Int16Array.prototype, "Int16Array.prototype"],
    [Uint32Array, "Uint32Array"],
    [Uint32Array.prototype, "Uint32Array.prototype"],
    [Int32Array, "Int32Array"],
    [Int32Array.prototype, "Int32Array.prototype"],
    [Float16Array, "Float16Array"],
    [Float16Array.prototype, "Float16Array.prototype"],
    [Float32Array, "Float32Array"],
    [Float32Array.prototype, "Float32Array.prototype"],
    [Float64Array, "Float64Array"],
    [Float64Array.prototype, "Float64Array.prototype"],
    [Uint8ClampedArray, "Uint8ClampedArray"],
    [Uint8ClampedArray.prototype, "Uint8ClampedArray.prototype"],
    [BigUint64Array, "BigUint64Array"],
    [BigUint64Array.prototype, "BigUint64Array.prototype"],
    [BigInt64Array, "BigInt64Array"],
    [BigInt64Array.prototype, "BigInt64Array.prototype"],
    [DataView, "DataView"],
    [DataView.prototype, "DataView.prototype"],
    [Map, "Map"],
    [Map.prototype, "Map.prototype"],
    [BigInt, "BigInt"],
    [BigInt.prototype, "BigInt.prototype"],
    [Set, "Set"],
    [Set.prototype, "Set.prototype"],
    [isFinite, "isFinite"],
    [isNaN, "isNaN"],
    [atob, "atob"],
    [atob.prototype, "atob.prototype"],
    [btoa, "btoa"],
    [btoa.prototype, "btoa.prototype"],
    [URL, "URL"],
    [URL.prototype, "URL.prototype"],
    [URLPattern, "URLPattern"],
    [URLPattern.prototype, "URLPattern.prototype"],
    [URLSearchParams, "URLSearchParams"],
    [URLSearchParams.prototype, "URLSearchParams.prototype"],
    [decodeURI, "decodeURI"],
    [decodeURIComponent, "decodeURIComponent"],
    [encodeURI, "encodeURI"],
    [encodeURIComponent, "encodeURIComponent"],
    [escape, "escape"],
    [unescape, "unescape"],
    [Blob, "Blob"],
    [Blob.prototype, "Blob.prototype"],
    [TextDecoder, "TextDecoder"],
    [TextDecoder.prototype, "TextDecoder.prototype"],
    [TextEncoder, "TextEncoder"],
    [TextEncoder.prototype, "TextEncoder.prototype"],
    [Request, "Request"],
    [Request.prototype, "Request.prototype"],
    [Response, "Response"],
    [Response.prototype, "Response.prototype"],
    [Headers, "Headers"],
    [Headers.prototype, "Headers.prototype"],
    [Event, "Event"],
    [Event.prototype, "Event.prototype"],
    [EventTarget, "EventTarget"],
    [EventTarget.prototype, "EventTarget.prototype"],
    [MessageEvent, "MessageEvent"],
    [MessageEvent.prototype, "MessageEvent.prototype"],
    [TextDecoderStream, "TextDecoderStream"],
    [TextDecoderStream.prototype, "TextDecoderStream.prototype"],
    [TextEncoderStream, "TextEncoderStream"],
    [TextEncoderStream.prototype, "TextEncoderStream.prototype"],
    [AbortController, "AbortController"],
    [AbortController.prototype, "AbortController.prototype"],
    [AbortSignal, "AbortSignal"],
    [AbortSignal.prototype, "AbortSignal.prototype"],
    [CompressionStream, "CompressionStream"],
    [CompressionStream.prototype, "CompressionStream.prototype"],
    [DecompressionStream, "DecompressionStream"],
    [DecompressionStream.prototype, "DecompressionStream.prototype"],
    [ReadableStream, "ReadableStream"],
    [ReadableStream.prototype, "ReadableStream.prototype"],
    [ReadableStreamDefaultReader, "ReadableStreamDefaultReader"],
    [ReadableStreamDefaultReader.prototype, "ReadableStreamDefaultReader.prototype"],
    [TransformStream, "TransformStream"],
    [TransformStream.prototype, "TransformStream.prototype"],
    [WritableStream, "WritableStream"],
    [WritableStream.prototype, "WritableStream.prototype"],
    [WritableStreamDefaultWriter, "WritableStreamDefaultWriter"],
    [WritableStreamDefaultWriter.prototype, "WritableStreamDefaultWriter.prototype"],
    [WritableStreamDefaultController, "WritableStreamDefaultController"],
    [WritableStreamDefaultController.prototype, "WritableStreamDefaultController.prototype"],
    [ReadableByteStreamController, "ReadableByteStreamController"],
    [ReadableByteStreamController.prototype, "ReadableByteStreamController.prototype"],
    [ReadableStreamBYOBReader, "ReadableStreamBYOBReader"],
    [ReadableStreamBYOBReader.prototype, "ReadableStreamBYOBReader.prototype"],
    [ReadableStreamBYOBRequest, "ReadableStreamBYOBRequest"],
    [ReadableStreamBYOBRequest.prototype, "ReadableStreamBYOBRequest.prototype"],
    [ReadableStreamDefaultController, "ReadableStreamDefaultController"],
    [ReadableStreamDefaultController.prototype, "ReadableStreamDefaultController.prototype"],
    [TransformStreamDefaultController, "TransformStreamDefaultController"],
    [TransformStreamDefaultController.prototype, "TransformStreamDefaultController.prototype"],
    [MessageChannel, "MessageChannel"],
    [MessageChannel.prototype, "MessageChannel.prototype"],
    [MessagePort, "MessagePort"],
    [MessagePort.prototype, "MessagePort.prototype"],
    [ByteLengthQueuingStrategy, "ByteLengthQueuingStrategy"],
    [ByteLengthQueuingStrategy.prototype, "ByteLengthQueuingStrategy.prototype"],
    [CountQueuingStrategy, "CountQueuingStrategy"],
    [CountQueuingStrategy.prototype, "CountQueuingStrategy.prototype"],
    [DOMException, "DOMException"],
    [DOMException.prototype, "DOMException.prototype"],
    [RegExp, "RegExp"],
    [RegExp.prototype, "RegExp.prototype"],
    [WebAssembly, "WebAssembly"],
    [Object.prototype, "Object.getPrototypeOf(WebAssembly)"],
    [Object, "WebAssembly.constructor"],
    [Array, "Array"],
    [Array.prototype, "Array.prototype"],
    [parseInt, "parseInt"],
    [Boolean, "Boolean"],
    [Boolean.prototype, "Boolean.prototype"],
    [Symbol, "Symbol"],
    [Symbol.prototype, "Symbol.prototype"],
    [JSON, "JSON"],
    [Proxy, "Proxy"],
    [Reflect, "Reflect"],
    [eval, "eval"],
    [Math, "Math"],
    [String, "String"],
    [String.prototype, "String.prototype"],
    [Error, "Error"],
    [Error.prototype, "Error.prototype"],
    [AggregateError, "AggregateError"],
    [AggregateError.prototype, "AggregateError.prototype"],
    [EvalError, "EvalError"],
    [EvalError.prototype, "EvalError.prototype"],
    [RangeError, "RangeError"],
    [RangeError.prototype, "RangeError.prototype"],
    [ReferenceError, "ReferenceError"],
    [ReferenceError.prototype, "ReferenceError.prototype"],
    [SyntaxError, "SyntaxError"],
    [SyntaxError.prototype, "SyntaxError.prototype"],
    [TypeError, "TypeError"],
    [TypeError.prototype, "TypeError.prototype"],
    [URIError, "URIError"],
    [URIError.prototype, "URIError.prototype"],
])
new Map([
    [structuredClone, ["length","name","prototype"]],
    [Function.prototype, ["length","name","arguments","caller","constructor","apply","bind","call","toString",Symbol.hasInstance]],
    [structuredClone.prototype, ["constructor"]],
    [Function, ["length","name","prototype"]],
    [parseFloat, ["length","name"]],
    [undefined, []],
    [Infinity, []],
    [Number.prototype, ["constructor","toExponential","toFixed","toPrecision","toString","valueOf","toLocaleString"]],
    [Number, ["length","name","prototype","isFinite","isInteger","isNaN","isSafeInteger","parseFloat","parseInt","MAX_VALUE","MIN_VALUE","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","EPSILON"]],
    [NaN, []],
    [ArrayBuffer, ["length","name","prototype","isView",Symbol.species]],
    [ArrayBuffer.prototype, ["constructor","byteLength","slice","maxByteLength","resizable","resize","transfer","transferToFixedLength","detached",Symbol.toStringTag]],
    [Uint8Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [TypedArray /*native function*/, ["length","name","prototype","of","from",Symbol.species]],
    [Uint8Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Int8Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Int8Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Uint16Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Uint16Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Int16Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Int16Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Uint32Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Uint32Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Int32Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Int32Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Float16Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Float16Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Float32Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Float32Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Float64Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Float64Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [Uint8ClampedArray, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [Uint8ClampedArray.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [BigUint64Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [BigUint64Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [BigInt64Array, ["length","name","prototype","BYTES_PER_ELEMENT"]],
    [BigInt64Array.prototype, ["constructor","BYTES_PER_ELEMENT"]],
    [DataView, ["length","name","prototype"]],
    [DataView.prototype, ["constructor","buffer","byteLength","byteOffset","getInt8","setInt8","getUint8","setUint8","getInt16","setInt16","getUint16","setUint16","getInt32","setInt32","getUint32","setUint32","getFloat32","setFloat32","getFloat64","setFloat64","getBigInt64","setBigInt64","getBigUint64","setBigUint64","getFloat16","setFloat16",Symbol.toStringTag]],
    [Map, ["length","name","prototype","groupBy",Symbol.species]],
    [Map.prototype, ["constructor","get","set","has","delete","clear","entries","forEach","keys","size","values",Symbol.toStringTag,Symbol.iterator]],
    [BigInt, ["length","name","prototype","asUintN","asIntN"]],
    [BigInt.prototype, ["constructor","toLocaleString","toString","valueOf",Symbol.toStringTag]],
    [Set, ["length","name","prototype",Symbol.species]],
    [Set.prototype, ["constructor","has","add","delete","clear","entries","forEach","size","values","keys","union","intersection","difference","symmetricDifference","isSubsetOf","isSupersetOf","isDisjointFrom",Symbol.toStringTag,Symbol.iterator]],
    [isFinite, ["length","name"]],
    [isNaN, ["length","name"]],
    [atob, ["length","name","prototype"]],
    [atob.prototype, ["constructor"]],
    [btoa, ["length","name","prototype"]],
    [btoa.prototype, ["constructor"]],
    [URL, ["length","name","prototype","parse","canParse","createObjectURL","revokeObjectURL"]],
    [URL.prototype, ["constructor","hash","host","hostname","href","origin","password","pathname","port","protocol","search","username","searchParams","toString","toJSON",Symbol("updateUrlSearch"),Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [URLPattern, ["length","name","prototype"]],
    [URLPattern.prototype, ["constructor","protocol","username","password","hostname","port","pathname","search","hash","hasRegExpGroups","test","exec",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [URLSearchParams, ["length","name","prototype"]],
    [URLSearchParams.prototype, ["constructor","append","delete","getAll","get","has","set","sort","toString","size","entries","keys","values","forEach",Symbol.iterator,Symbol.toStringTag]],
    [decodeURI, ["length","name"]],
    [decodeURIComponent, ["length","name"]],
    [encodeURI, ["length","name"]],
    [encodeURIComponent, ["length","name"]],
    [escape, ["length","name"]],
    [unescape, ["length","name"]],
    [Blob, ["length","name","prototype"]],
    [Blob.prototype, ["constructor","size","type","slice","stream","text","arrayBuffer","bytes",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [TextDecoder, ["length","name","prototype"]],
    [TextDecoder.prototype, ["constructor","encoding","fatal","ignoreBOM","decode",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [TextEncoder, ["length","name","prototype"]],
    [TextEncoder.prototype, ["constructor","encoding","encode","encodeInto",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [Request, ["length","name","prototype"]],
    [Request.prototype, ["constructor","method","url","headers","redirect","signal","clone","body","bodyUsed","arrayBuffer","blob","bytes","formData","json","text",Symbol("headers"),Symbol("signal"),Symbol("mime type"),Symbol("body"),Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [Response, ["length","name","prototype","error","redirect","json"]],
    [Response.prototype, ["constructor","type","url","redirected","status","ok","statusText","headers","clone","body","bodyUsed","arrayBuffer","blob","bytes","formData","json","text",Symbol("mime type"),Symbol("body"),Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [Headers, ["length","name","prototype"]],
    [Headers.prototype, ["constructor","append","delete","get","getSetCookie","has","set","entries","keys","values","forEach",Symbol("iterable headers"),Symbol.for("Deno.privateCustomInspect"),Symbol.iterator,Symbol.toStringTag]],
    [Event, ["length","name","prototype","NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"]],
    [Event.prototype, ["constructor","type","target","srcElement","currentTarget","composedPath","NONE","CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE","eventPhase","stopPropagation","cancelBubble","stopImmediatePropagation","bubbles","cancelable","returnValue","preventDefault","defaultPrevented","composed","initialized","timeStamp","isTrusted",Symbol.for("Deno.privateCustomInspect")]],
    [EventTarget, ["length","name","prototype"]],
    [EventTarget.prototype, ["constructor","addEventListener","removeEventListener","dispatchEvent","getParent",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [MessageEvent, ["length","name","prototype"]],
    [MessageEvent.prototype, ["constructor","source",Symbol.for("Deno.privateCustomInspect")]],
    [TextDecoderStream, ["length","name","prototype"]],
    [TextDecoderStream.prototype, ["constructor","encoding","fatal","ignoreBOM","readable","writable",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [TextEncoderStream, ["length","name","prototype"]],
    [TextEncoderStream.prototype, ["constructor","encoding","readable","writable",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [AbortController, ["length","name","prototype"]],
    [AbortController.prototype, ["constructor","signal","abort",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [AbortSignal, ["length","name","prototype","any","abort","timeout"]],
    [AbortSignal.prototype, ["constructor","aborted","reason","throwIfAborted","addEventListener","removeEventListener","onabort",Symbol("[[add]]"),Symbol("[[signalAbort]]"),Symbol("[[runAbortSteps]]"),Symbol("[[remove]]"),Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [CompressionStream, ["length","name","prototype"]],
    [CompressionStream.prototype, ["constructor","readable","writable",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [DecompressionStream, ["length","name","prototype"]],
    [DecompressionStream.prototype, ["constructor","readable","writable",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [ReadableStream, ["length","name","prototype","from"]],
    [ReadableStream.prototype, ["constructor","locked","cancel","getReader","pipeThrough","pipeTo","tee","values",Symbol.for("Deno.privateCustomInspect"),Symbol.asyncIterator,Symbol.toStringTag]],
    [ReadableStreamDefaultReader, ["length","name","prototype"]],
    [ReadableStreamDefaultReader.prototype, ["constructor","read","releaseLock","closed","cancel",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [TransformStream, ["length","name","prototype"]],
    [TransformStream.prototype, ["constructor","readable","writable",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [WritableStream, ["length","name","prototype"]],
    [WritableStream.prototype, ["constructor","locked","abort","close","getWriter",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [WritableStreamDefaultWriter, ["length","name","prototype"]],
    [WritableStreamDefaultWriter.prototype, ["constructor","closed","desiredSize","ready","abort","close","releaseLock","write",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [WritableStreamDefaultController, ["length","name","prototype"]],
    [WritableStreamDefaultController.prototype, ["constructor","signal","error",Symbol.for("Deno.privateCustomInspect"),Symbol("[[AbortSteps]]"),Symbol("[[ErrorSteps]]"),Symbol.toStringTag]],
    [ReadableByteStreamController, ["length","name","prototype"]],
    [ReadableByteStreamController.prototype, ["constructor","byobRequest","desiredSize","close","enqueue","error",Symbol.for("Deno.privateCustomInspect"),Symbol("[[CancelSteps]]"),Symbol("[[PullSteps]]"),Symbol("[[ReleaseSteps]]"),Symbol.toStringTag]],
    [ReadableStreamBYOBReader, ["length","name","prototype"]],
    [ReadableStreamBYOBReader.prototype, ["constructor","read","releaseLock","closed","cancel",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [ReadableStreamBYOBRequest, ["length","name","prototype"]],
    [ReadableStreamBYOBRequest.prototype, ["constructor","view","respond","respondWithNewView",Symbol.toStringTag]],
    [ReadableStreamDefaultController, ["length","name","prototype"]],
    [ReadableStreamDefaultController.prototype, ["constructor","desiredSize","close","enqueue","error",Symbol.for("Deno.privateCustomInspect"),Symbol("[[CancelSteps]]"),Symbol("[[PullSteps]]"),Symbol("[[ReleaseSteps]]"),Symbol.toStringTag]],
    [TransformStreamDefaultController, ["length","name","prototype"]],
    [TransformStreamDefaultController.prototype, ["constructor","desiredSize","enqueue","error","terminate",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [MessageChannel, ["length","name","prototype"]],
    [MessageChannel.prototype, ["constructor","port1","port2",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [MessagePort, ["length","name","prototype"]],
    [MessagePort.prototype, ["constructor","postMessage","start","close","removeEventListener","addEventListener","onmessage","onmessageerror",Symbol("refMessagePort"),Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [ByteLengthQueuingStrategy, ["length","name","prototype"]],
    [ByteLengthQueuingStrategy.prototype, ["constructor","highWaterMark","size",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [CountQueuingStrategy, ["length","name","prototype"]],
    [CountQueuingStrategy.prototype, ["constructor","highWaterMark","size",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [DOMException, ["length","name","prototype","INDEX_SIZE_ERR","DOMSTRING_SIZE_ERR","HIERARCHY_REQUEST_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR","NO_DATA_ALLOWED_ERR","NO_MODIFICATION_ALLOWED_ERR","NOT_FOUND_ERR","NOT_SUPPORTED_ERR","INUSE_ATTRIBUTE_ERR","INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR","VALIDATION_ERR","TYPE_MISMATCH_ERR","SECURITY_ERR","NETWORK_ERR","ABORT_ERR","URL_MISMATCH_ERR","QUOTA_EXCEEDED_ERR","TIMEOUT_ERR","INVALID_NODE_TYPE_ERR","DATA_CLONE_ERR"]],
    [DOMException.prototype, ["constructor","message","name","code","INDEX_SIZE_ERR","DOMSTRING_SIZE_ERR","HIERARCHY_REQUEST_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR","NO_DATA_ALLOWED_ERR","NO_MODIFICATION_ALLOWED_ERR","NOT_FOUND_ERR","NOT_SUPPORTED_ERR","INUSE_ATTRIBUTE_ERR","INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR","VALIDATION_ERR","TYPE_MISMATCH_ERR","SECURITY_ERR","NETWORK_ERR","ABORT_ERR","URL_MISMATCH_ERR","QUOTA_EXCEEDED_ERR","TIMEOUT_ERR","INVALID_NODE_TYPE_ERR","DATA_CLONE_ERR",Symbol.for("Deno.privateCustomInspect"),Symbol.toStringTag]],
    [RegExp, ["length","name","prototype","input","$_","lastMatch","$&","lastParen","$+","leftContext","$`","rightContext","$'","$1","$2","$3","$4","$5","$6","$7","$8","$9",Symbol.species]],
    [RegExp.prototype, ["constructor","exec","dotAll","flags","global","hasIndices","ignoreCase","multiline","source","sticky","unicode","unicodeSets","compile","toString","test",Symbol.match,Symbol.matchAll,Symbol.replace,Symbol.search,Symbol.split]],
    [WebAssembly, ["compile","validate","instantiate","Module","Instance","Table","Memory","Global","Tag","JSTag","Exception","CompileError","LinkError","RuntimeError","compileStreaming","instantiateStreaming",Symbol.toStringTag]],
    [Object.prototype, ["constructor","__defineGetter__","__defineSetter__","hasOwnProperty","__lookupGetter__","__lookupSetter__","isPrototypeOf","propertyIsEnumerable","toString","valueOf","toLocaleString"]],
    [Object, ["length","name","prototype","assign","getOwnPropertyDescriptor","getOwnPropertyDescriptors","getOwnPropertyNames","getOwnPropertySymbols","hasOwn","is","preventExtensions","seal","create","defineProperties","defineProperty","freeze","getPrototypeOf","setPrototypeOf","isExtensible","isFrozen","isSealed","keys","entries","fromEntries","values","groupBy"]],
    [Array, ["length","name","prototype","isArray","from","fromAsync","of",Symbol.species]],
    [Array.prototype, ["length","constructor","at","concat","copyWithin","fill","find","findIndex","findLast","findLastIndex","lastIndexOf","pop","push","reverse","shift","unshift","slice","sort","splice","includes","indexOf","join","keys","entries","values","forEach","filter","flat","flatMap","map","every","some","reduce","reduceRight","toReversed","toSorted","toSpliced","with","toLocaleString","toString",Symbol.iterator,Symbol.unscopables]],
    [parseInt, ["length","name"]],
    [Boolean, ["length","name","prototype"]],
    [Boolean.prototype, ["constructor","toString","valueOf"]],
    [Symbol, ["length","name","prototype","for","keyFor","asyncIterator","hasInstance","isConcatSpreadable","iterator","match","matchAll","replace","search","species","split","toPrimitive","toStringTag","unscopables","dispose","asyncDispose","metadata"]],
    [Symbol.prototype, ["constructor","toString","valueOf","description",Symbol.toStringTag,Symbol.toPrimitive]],
    [JSON, ["parse","stringify","rawJSON","isRawJSON",Symbol.toStringTag]],
    [Proxy, ["length","name","revocable"]],
    [Reflect, ["defineProperty","deleteProperty","apply","construct","get","getOwnPropertyDescriptor","getPrototypeOf","has","isExtensible","ownKeys","preventExtensions","set","setPrototypeOf",Symbol.toStringTag]],
    [eval, ["length","name"]],
    [Math, ["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2","f16round",Symbol.toStringTag]],
    [String, ["length","name","prototype","fromCharCode","fromCodePoint","raw"]],
    [String.prototype, ["length","constructor","anchor","at","big","blink","bold","charAt","charCodeAt","codePointAt","concat","endsWith","fontcolor","fontsize","fixed","includes","indexOf","isWellFormed","italics","lastIndexOf","link","localeCompare","match","matchAll","normalize","padEnd","padStart","repeat","replace","replaceAll","search","slice","small","split","strike","sub","substr","substring","sup","startsWith","toString","toWellFormed","trim","trimStart","trimLeft","trimEnd","trimRight","toLocaleLowerCase","toLocaleUpperCase","toLowerCase","toUpperCase","valueOf",Symbol.iterator]],
    [Error, ["length","name","prototype","captureStackTrace","stackTraceLimit"]],
    [Error.prototype, ["constructor","name","message","toString"]],
    [AggregateError, ["length","name","prototype"]],
    [AggregateError.prototype, ["constructor","name","message"]],
    [EvalError, ["length","name","prototype"]],
    [EvalError.prototype, ["constructor","name","message"]],
    [RangeError, ["length","name","prototype"]],
    [RangeError.prototype, ["constructor","name","message"]],
    [ReferenceError, ["length","name","prototype"]],
    [ReferenceError.prototype, ["constructor","name","message"]],
    [SyntaxError, ["length","name","prototype"]],
    [SyntaxError.prototype, ["constructor","name","message"]],
    [TypeError, ["length","name","prototype"]],
    [TypeError.prototype, ["constructor","name","message"]],
    [URIError, ["length","name","prototype"]],
    [URIError.prototype, ["constructor","name","message"]],
])
RegExp.length:  {
    value: 2,
    writable: false,
    enumerable: false,
    configurable: true,
}
RegExp.name:  {
    value: "RegExp",
    writable: false,
    enumerable: false,
    configurable: true,
}
RegExp.prototype:  {
    value: RegExp.prototype,
    writable: false,
    enumerable: false,
    configurable: false,
}
RegExp.input:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"input").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"input").set,
    enumerable: false,
    configurable: true,
}
RegExp.$_:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$_").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$_").set,
    enumerable: false,
    configurable: true,
}
RegExp.lastMatch:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"lastMatch").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"lastMatch").set,
    enumerable: false,
    configurable: true,
}
RegExp.$&:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$&").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$&").set,
    enumerable: false,
    configurable: true,
}
RegExp.lastParen:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"lastParen").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"lastParen").set,
    enumerable: false,
    configurable: true,
}
RegExp.$+:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$+").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$+").set,
    enumerable: false,
    configurable: true,
}
RegExp.leftContext:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"leftContext").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"leftContext").set,
    enumerable: false,
    configurable: true,
}
RegExp.$`:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$`").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$`").set,
    enumerable: false,
    configurable: true,
}
RegExp.rightContext:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"rightContext").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"rightContext").set,
    enumerable: false,
    configurable: true,
}
RegExp.$':  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$'").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$'").set,
    enumerable: false,
    configurable: true,
}
RegExp.$1:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$1").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$1").set,
    enumerable: false,
    configurable: true,
}
RegExp.$2:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$2").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$2").set,
    enumerable: false,
    configurable: true,
}
RegExp.$3:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$3").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$3").set,
    enumerable: false,
    configurable: true,
}
RegExp.$4:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$4").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$4").set,
    enumerable: false,
    configurable: true,
}
RegExp.$5:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$5").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$5").set,
    enumerable: false,
    configurable: true,
}
RegExp.$6:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$6").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$6").set,
    enumerable: false,
    configurable: true,
}
RegExp.$7:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$7").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$7").set,
    enumerable: false,
    configurable: true,
}
RegExp.$8:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$8").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$8").set,
    enumerable: false,
    configurable: true,
}
RegExp.$9:  {
    get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$9").get,
    set: Object.getOwnPropertyDescriptor({/*unknown obj*/},"$9").set,
    enumerable: false,
    configurable: true,
}
null null
true true
5 5
{} {}
{a:1} {
    a: 1,
}
{a:1, b:2} {
    a: 1,
    b: 2,
}
new Date() new Date(1730051728292)
new Error() new Error("")
new Set() new Set([])
new Set([1,2,3]) new Set([1,2,3])
new Map() new Map()
new Map([[1,2],[3,4]]) new Map([
    [1, 2],
    [3, 4],
])
new ArrayBuffer() new ArrayBuffer({})
new ArrayBuffer(10) new ArrayBuffer({})
new Int8Array() new Int8Array([])
new Int8Array(10) new Int8Array([0,0,0,0,0,0,0,0,0,0])
new Uint8Array() new Uint8Array([])
new Uint8Array(10) new Uint8Array([0,0,0,0,0,0,0,0,0,0])
new Uint8ClampedArray() new Uint8ClampedArray([])
new Uint8ClampedArray(10) new Uint8ClampedArray([0,0,0,0,0,0,0,0,0,0])
new Int16Array() new Int16Array([])
new Int16Array(10) new Int16Array([0,0,0,0,0,0,0,0,0,0])
new Uint16Array() new Uint16Array([])
new Uint16Array(10) new Uint16Array([0,0,0,0,0,0,0,0,0,0])
function: (function(){return "howdy_howdy_howdy".match(/howdy/)})
arrow function: (()=>{return "howdy_howdy_howdy".match(/howdy/)})
class: class P {}
anonymous class: (class {})
regex match: new MyArray({
    "0": "howdy",
    length: 1,
    index: 0,
    input: "howdy_howdy_howdy",
    groups: undefined,
})
regex match: Object.assign(["howdy"], {
    index: 0,
    input: "howdy_howdy_howdy",
    groups: undefined,
})
new Map([
    [
        Object.assign(["howdy"], {
            index: 0,
            input: "howdy_howdy_howdy",
            groups: undefined,
        }),
        Object.assign(["howdy"], {
            index: 0,
            input: "howdy_howdy_howdy",
            groups: undefined,
        })
    ],
    [structuredClone, {
        length: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "structuredClone",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: structuredClone.prototype,
            writable: true,
            enumerable: false,
            configurable: false,
        },
    }],
    [Function.prototype, {
        length: {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        arguments: {
            get: (function(){/*native function*/}}),
            set: (function(){/*native function*/}}),
            enumerable: false,
            configurable: true,
        },
        caller: {
            get: (function(){/*native function*/}}),
            set: (function(){/*native function*/}}),
            enumerable: false,
            configurable: true,
        },
        constructor: {
            value: Function,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        apply: {
            value: apply /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        bind: {
            value: bind /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        call: {
            value: call /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toString: {
            value: toString /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [structuredClone.prototype, {
        constructor: {
            value: structuredClone,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [Function, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Function",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Function.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [parseFloat, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "parseFloat",
            writable: false,
            enumerable: false,
            configurable: true,
        },
    }],
    [Infinity, {}],
    [Number.prototype, {
        constructor: {
            value: Number,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toExponential: {
            value: toExponential /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toFixed: {
            value: toFixed /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toPrecision: {
            value: toPrecision /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toString: {
            value: toString /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        valueOf: {
            value: valueOf /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toLocaleString: {
            value: toLocaleString /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [Number, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Number",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Number.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        isFinite: {
            value: isFinite /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        isInteger: {
            value: isInteger /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        isNaN: {
            value: isNaN /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        isSafeInteger: {
            value: isSafeInteger /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        parseFloat: {
            value: parseFloat,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        parseInt: {
            value: parseInt,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        MAX_VALUE: {
            value: 1.7976931348623157e+308,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        MIN_VALUE: {
            value: 5e-324,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        NaN: {
            value: NaN,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        NEGATIVE_INFINITY: {
            value: -Infinity,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        POSITIVE_INFINITY: {
            value: Infinity,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        MAX_SAFE_INTEGER: {
            value: 9007199254740991,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        MIN_SAFE_INTEGER: {
            value: -9007199254740991,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        EPSILON: {
            value: 2.220446049250313e-16,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [NaN, {}],
    [ArrayBuffer, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "ArrayBuffer",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: ArrayBuffer.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        isView: {
            value: isView /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [ArrayBuffer.prototype, {
        constructor: {
            value: ArrayBuffer,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        byteLength: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"byteLength").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        slice: {
            value: slice /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        maxByteLength: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"maxByteLength").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        resizable: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"resizable").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        resize: {
            value: resize /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        transfer: {
            value: transfer /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        transferToFixedLength: {
            value: transferToFixedLength /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        detached: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"detached").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
    }],
    [Uint8Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Uint8Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Uint8Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [TypedArray /*native function*/, {
        length: {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "TypedArray",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: TypedArray.prototype /*TypedArray is local*/,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        of: {
            value: of /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        from: {
            value: from /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [Uint8Array.prototype, {
        constructor: {
            value: Uint8Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Int8Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Int8Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Int8Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Int8Array.prototype, {
        constructor: {
            value: Int8Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Uint16Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Uint16Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Uint16Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Uint16Array.prototype, {
        constructor: {
            value: Uint16Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Int16Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Int16Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Int16Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Int16Array.prototype, {
        constructor: {
            value: Int16Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Uint32Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Uint32Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Uint32Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 4,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Uint32Array.prototype, {
        constructor: {
            value: Uint32Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 4,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Int32Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Int32Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Int32Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 4,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Int32Array.prototype, {
        constructor: {
            value: Int32Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 4,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Float16Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Float16Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Float16Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Float16Array.prototype, {
        constructor: {
            value: Float16Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Float32Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Float32Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Float32Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 4,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Float32Array.prototype, {
        constructor: {
            value: Float32Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 4,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Float64Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Float64Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Float64Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 8,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Float64Array.prototype, {
        constructor: {
            value: Float64Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 8,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Uint8ClampedArray, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Uint8ClampedArray",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Uint8ClampedArray.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Uint8ClampedArray.prototype, {
        constructor: {
            value: Uint8ClampedArray,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [BigUint64Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "BigUint64Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: BigUint64Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 8,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [BigUint64Array.prototype, {
        constructor: {
            value: BigUint64Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 8,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [BigInt64Array, {
        length: {
            value: 3,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "BigInt64Array",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: BigInt64Array.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        BYTES_PER_ELEMENT: {
            value: 8,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [BigInt64Array.prototype, {
        constructor: {
            value: BigInt64Array,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        BYTES_PER_ELEMENT: {
            value: 8,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [DataView, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "DataView",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: DataView.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [DataView.prototype, {
        constructor: {
            value: DataView,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        buffer: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"buffer").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        byteLength: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"byteLength").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        byteOffset: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"byteOffset").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        getInt8: {
            value: getInt8 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setInt8: {
            value: setInt8 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getUint8: {
            value: getUint8 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setUint8: {
            value: setUint8 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getInt16: {
            value: getInt16 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setInt16: {
            value: setInt16 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getUint16: {
            value: getUint16 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setUint16: {
            value: setUint16 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getInt32: {
            value: getInt32 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setInt32: {
            value: setInt32 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getUint32: {
            value: getUint32 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setUint32: {
            value: setUint32 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getFloat32: {
            value: getFloat32 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setFloat32: {
            value: setFloat32 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getFloat64: {
            value: getFloat64 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setFloat64: {
            value: setFloat64 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getBigInt64: {
            value: getBigInt64 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setBigInt64: {
            value: setBigInt64 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getBigUint64: {
            value: getBigUint64 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setBigUint64: {
            value: setBigUint64 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        getFloat16: {
            value: getFloat16 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        setFloat16: {
            value: setFloat16 /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [Map, {
        length: {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Map",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Map.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        groupBy: {
            value: groupBy /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [Map.prototype, {
        constructor: {
            value: Map,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        get: {
            value: get /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        set: {
            value: set /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        has: {
            value: has /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        delete: {
            value: (function(){/*name: "delete", native function*/}}),
            writable: true,
            enumerable: false,
            configurable: true,
        },
        clear: {
            value: clear /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        entries: {
            value: entries /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        forEach: {
            value: forEach /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        keys: {
            value: keys /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        size: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"size").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        values: {
            value: values /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [BigInt, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "BigInt",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: BigInt.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
        asUintN: {
            value: asUintN /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        asIntN: {
            value: asIntN /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [BigInt.prototype, {
        constructor: {
            value: BigInt,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toLocaleString: {
            value: toLocaleString /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        toString: {
            value: toString /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        valueOf: {
            value: valueOf /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [Set, {
        length: {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "Set",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: Set.prototype,
            writable: false,
            enumerable: false,
            configurable: false,
        },
    }],
    [Set.prototype, {
        constructor: {
            value: Set,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        has: {
            value: has /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        add: {
            value: add /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        delete: {
            value: (function(){/*name: "delete", native function*/}}),
            writable: true,
            enumerable: false,
            configurable: true,
        },
        clear: {
            value: clear /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        entries: {
            value: entries /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        forEach: {
            value: forEach /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        size: {
            get: Object.getOwnPropertyDescriptor({/*unknown obj*/},"size").get,
            set: undefined,
            enumerable: false,
            configurable: true,
        },
        values: {
            value: values /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        keys: {
            value: values /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        union: {
            value: union /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        intersection: {
            value: intersection /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        difference: {
            value: difference /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        symmetricDifference: {
            value: symmetricDifference /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        isSubsetOf: {
            value: isSubsetOf /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        isSupersetOf: {
            value: isSupersetOf /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
        isDisjointFrom: {
            value: isDisjointFrom /*native function*/,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [isFinite, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "isFinite",
            writable: false,
            enumerable: false,
            configurable: true,
        },
    }],
    [isNaN, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "isNaN",
            writable: false,
            enumerable: false,
            configurable: true,
        },
    }],
    [atob, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "atob",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: atob.prototype,
            writable: true,
            enumerable: false,
            configurable: false,
        },
    }],
    [atob.prototype, {
        constructor: {
            value: atob,
            writable: true,
            enumerable: false,
            configurable: true,
        },
    }],
    [btoa, {
        length: {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true,
        },
        name: {
            value: "btoa",
            writable: false,
            enumerable: false,
            configurable: true,
        },
        prototype: {
            value: btoa.prototype,
            writable: true,
            enumerable: false,
            configurable: false,
        },
    }],
])
